@page "/login"

@inject HttpClient Http
@inject NavigationManager NavigationManager
@inject IJSRuntime JSRuntime
@using System.Text.Json
@using System.Net.Http
@using System.Net.Http.Json
@using System.Text
<link href="css/login.css" rel="stylesheet" />


<div class="login-container">
    <form @onsubmit="HandleLogin">
        <!-- Username Field -->
        <div class="row">
            <div class="form-group full-width">
                <label for="username">Username</label>
                <input class="form-control" id="username" placeholder="Username" required @bind="username" />
                @if (!string.IsNullOrEmpty(usernameError))
                {
                    <div class="text-danger">@usernameError</div>
                }
            </div>
        </div>

        <!-- Password Field -->
        <div class="row">
            <div class="form-group full-width">
                <label for="password">Password</label>
                <input type="password" class="form-control" id="password" placeholder="Password" required @bind="password" />
                <button type="button" class="btn btn-link"  aria-label="Toggle password visibility">tg
                    @if (hidePassword)
                    {
                        <span>Show</span>
                    }
                    else
                    {
                        <span>Hide</span>
                    }
                </button>
                @if (!string.IsNullOrEmpty(passwordError))
                {
                    <div class="text-danger">@passwordError</div>
                }
            </div>
        </div>

        <!-- Remember & Forgot Password -->
        <div class="remember-forgot">
            <div class="remember-me">
                <!-- Remember me checkbox could be added here if needed -->
            </div>
            <a href="/auth/forget-password" class="forgot-password">Forgot Password?</a>
        </div>

        <!-- Submit Button -->
        <button type="submit" class="login-button">Sign in</button>

        <!-- Sign Up Link -->
        <div class="signup-link">
            Don't have an account? <a href="/auth/register">Sign up</a>
        </div>
    </form>
</div>

@code {
    public class ApiResponse
    {
        public string Status { get; set; }
        public ApiData Data { get; set; }
    }

    public class ApiData
    {
        public int Id { get; set; }
        public bool IsAuthenticated { get; set; }
        public string Token { get; set; }
        public bool IsAdmin { get; set; }
    }
    private string username = "HadayiekOctober";
    private string password = "P@ssw0rd";
    private string errorMessage = "";
    private bool hidePassword = true;
    private bool isCaptchaValid = true; // You can integrate captcha validation if needed
    private string usernameError;
    private string passwordError;

    private async Task HandleLogin()
    {
        var loginData = new
        {
            username = username,
            password = password
        };

        var request = new HttpRequestMessage(HttpMethod.Post, "api/User/login")
            {
                Content = new StringContent(JsonSerializer.Serialize(loginData), Encoding.UTF8, "application/json")
            };

        try
        {
            var response = await Http.SendAsync(request);
            var responseData = await response.Content.ReadFromJsonAsync<ApiResponse>();

            // Log the response to the console (for debugging purposes)
            await JSRuntime.InvokeVoidAsync("logToConsole", $"Login response: {responseData}");

            if (response.IsSuccessStatusCode && responseData?.Data?.IsAuthenticated == true)
            {
                // Store token and authentication status in local storage
                await JSRuntime.InvokeVoidAsync("localStorage.setItem", "token", responseData.Data.Token);
                await JSRuntime.InvokeVoidAsync("localStorage.setItem", "isAuthenticated", "true");

                // Optionally store additional information like isAdmin or id
                await JSRuntime.InvokeVoidAsync("localStorage.setItem", "isAdmin", responseData.Data.IsAdmin.ToString());
                await JSRuntime.InvokeVoidAsync("localStorage.setItem", "userId", responseData.Data.Id.ToString());

                // Log success and redirect
                await JSRuntime.InvokeVoidAsync("logToConsole", "Login Successful!");
                NavigationManager.NavigateTo("/");
            }
            else
            {
                errorMessage = "Login failed. Please check your credentials.";
                await JSRuntime.InvokeVoidAsync("logToConsole", "Login failed.");
            }
        }
        catch (Exception ex)
        {
            // Log error in the browser console
            await JSRuntime.InvokeVoidAsync("logToConsole", $"Error: {ex.Message}");

            errorMessage = $"Error: {ex.Message}";
        }
    }
}
